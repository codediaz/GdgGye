---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Coming Soon - GDG Guayaquil">
  <main class="h-screen flex flex-col justify-center items-center bg-black text-white font-mono p-4 relative">
    <h1 id="comingSoon" class="text-3xl sm:text-4xl md:text-5xl mb-4 sm:mb-6 md:mb-8 h-16 sm:h-18 md:h-20 overflow-hidden"></h1>
    <h1 id="gdgGuayaquil" class="text-4xl sm:text-5xl md:text-6xl h-20 sm:h-22 md:h-24 overflow-hidden"></h1>
    <footer class="absolute bottom-4 text-sm sm:text-base opacity-70 hover:opacity-100 transition-opacity duration-300">
      With <span class="text-red-500">❤️</span> by <a href="https://github.com/codediaz" target="_blank" rel="noopener noreferrer" class="underline hover:text-blue-400 transition-colors duration-300">@codediaz</a>
    </footer>
  </main>
</Layout>

<style>
  @keyframes blink {
    0%, 100% { border-right-color: transparent }
    50% { border-right-color: white }
  }

  h1 {
    border-right: 0.08em solid white;
    animation: blink 0.7s step-end infinite;
    white-space: nowrap;
  }

  @keyframes fadeInOut {
    0%, 100% { opacity: 0; }
    50% { opacity: 1; }
  }
</style>
<script>
  const typeWriter = (element: HTMLElement, text: string, speed: number): Promise<void> => {
    return new Promise((resolve) => {
      let i = 0;
      element.textContent = '';
      element.style.animation = 'none';
      
      const typing = setInterval(() => {
        if (i < text.length) {
          element.textContent += text.charAt(i);
          i++;
        } else {
          clearInterval(typing);
          resolve();
        }
      }, speed);
    });
  };

  const fadeOut = (element: HTMLElement): Promise<void> => {
    return new Promise((resolve) => {
      element.style.animation = 'fadeInOut 2s forwards';
      setTimeout(resolve, 2000);
    });
  };

  const animateText = async (element: HTMLElement, text: string, speed: number, delay: number): Promise<void> => {
    while (true) {
      await typeWriter(element, text, speed);
      await new Promise(resolve => setTimeout(resolve, delay));
      await fadeOut(element);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  };

  document.addEventListener('DOMContentLoaded', () => {
    const comingSoon = document.getElementById('comingSoon') as HTMLElement;
    const gdgGuayaquil = document.getElementById('gdgGuayaquil') as HTMLElement;

    if (comingSoon && gdgGuayaquil) {
      animateText(comingSoon, 'Coming Soon', 100, 1000);
      setTimeout(() => {
        animateText(gdgGuayaquil, 'GDG Guayaquil', 100, 1000);
      }, 3000);
    }
  });
</script>